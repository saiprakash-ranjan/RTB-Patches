From d3dc36d86facb267ac4a24ab6c768b92e00bf1ca Mon Sep 17 00:00:00 2001
From: Sai Prakash Ranjan <quic_saipraka@quicinc.com>
Date: Mon, 29 Nov 2021 17:54:13 +0530
Subject: [PATCH] asm-generic/io: Add callback based MMIO logging support

Signed-off-by: Sai Prakash Ranjan <quic_saipraka@quicinc.com>
---
 arch/arm64/kvm/hyp/nvhe/Makefile |  2 +-
 include/asm-generic/io.h         | 17 +++++++++
 include/linux/log_rwmmio.h       | 42 ++++++++++++++++++++++
 include/trace/events/rwmmio.h    | 62 ++++++++++++++++++++++++++++++++
 kernel/trace/Kconfig             |  7 ++++
 kernel/trace/Makefile            |  1 +
 kernel/trace/trace_readwrite.c   | 43 ++++++++++++++++++++++
 7 files changed, 173 insertions(+), 1 deletion(-)
 create mode 100644 include/linux/log_rwmmio.h
 create mode 100644 include/trace/events/rwmmio.h
 create mode 100644 kernel/trace/trace_readwrite.c

diff --git a/arch/arm64/kvm/hyp/nvhe/Makefile b/arch/arm64/kvm/hyp/nvhe/Makefile
index c3c11974fa3b..ff56d2165ea9 100644
--- a/arch/arm64/kvm/hyp/nvhe/Makefile
+++ b/arch/arm64/kvm/hyp/nvhe/Makefile
@@ -4,7 +4,7 @@
 #
 
 asflags-y := -D__KVM_NVHE_HYPERVISOR__ -D__DISABLE_EXPORTS
-ccflags-y := -D__KVM_NVHE_HYPERVISOR__ -D__DISABLE_EXPORTS
+ccflags-y := -D__KVM_NVHE_HYPERVISOR__ -D__DISABLE_EXPORTS -D__DISABLE_TRACE_MMIO__
 
 hostprogs := gen-hyprel
 HOST_EXTRACFLAGS += -I$(objtree)/include
diff --git a/include/asm-generic/io.h b/include/asm-generic/io.h
index 7ce93aaf69f8..4e6d7d87722e 100644
--- a/include/asm-generic/io.h
+++ b/include/asm-generic/io.h
@@ -10,6 +10,7 @@
 #include <asm/page.h> /* I/O is all done through memory accesses */
 #include <linux/string.h> /* for memset() and memcpy() */
 #include <linux/types.h>
+#include <linux/log_rwmmio.h>
 
 #ifdef CONFIG_GENERIC_IOMAP
 #include <asm-generic/iomap.h>
@@ -149,6 +150,7 @@ static inline u8 readb(const volatile void __iomem *addr)
 {
 	u8 val;
 
+	log_mmio_read(8, addr);
 	__io_br();
 	val = __raw_readb(addr);
 	__io_ar(val);
@@ -162,6 +164,7 @@ static inline u16 readw(const volatile void __iomem *addr)
 {
 	u16 val;
 
+	log_mmio_read(16, addr);
 	__io_br();
 	val = __le16_to_cpu((__le16 __force)__raw_readw(addr));
 	__io_ar(val);
@@ -175,6 +178,7 @@ static inline u32 readl(const volatile void __iomem *addr)
 {
 	u32 val;
 
+	log_mmio_read(32, addr);
 	__io_br();
 	val = __le32_to_cpu((__le32 __force)__raw_readl(addr));
 	__io_ar(val);
@@ -189,6 +193,7 @@ static inline u64 readq(const volatile void __iomem *addr)
 {
 	u64 val;
 
+	log_mmio_read(64, addr);
 	__io_br();
 	val = __le64_to_cpu(__raw_readq(addr));
 	__io_ar(val);
@@ -201,6 +206,7 @@ static inline u64 readq(const volatile void __iomem *addr)
 #define writeb writeb
 static inline void writeb(u8 value, volatile void __iomem *addr)
 {
+	log_mmio_write(8, value, addr);
 	__io_bw();
 	__raw_writeb(value, addr);
 	__io_aw();
@@ -211,6 +217,7 @@ static inline void writeb(u8 value, volatile void __iomem *addr)
 #define writew writew
 static inline void writew(u16 value, volatile void __iomem *addr)
 {
+	log_mmio_write(16, value, addr);
 	__io_bw();
 	__raw_writew((u16 __force)cpu_to_le16(value), addr);
 	__io_aw();
@@ -221,6 +228,7 @@ static inline void writew(u16 value, volatile void __iomem *addr)
 #define writel writel
 static inline void writel(u32 value, volatile void __iomem *addr)
 {
+	log_mmio_write(32, value, addr);
 	__io_bw();
 	__raw_writel((u32 __force)__cpu_to_le32(value), addr);
 	__io_aw();
@@ -232,6 +240,7 @@ static inline void writel(u32 value, volatile void __iomem *addr)
 #define writeq writeq
 static inline void writeq(u64 value, volatile void __iomem *addr)
 {
+	log_mmio_write(64, value, addr);
 	__io_bw();
 	__raw_writeq(__cpu_to_le64(value), addr);
 	__io_aw();
@@ -248,6 +257,7 @@ static inline void writeq(u64 value, volatile void __iomem *addr)
 #define readb_relaxed readb_relaxed
 static inline u8 readb_relaxed(const volatile void __iomem *addr)
 {
+	log_mmio_read(8, addr);
 	return __raw_readb(addr);
 }
 #endif
@@ -256,6 +266,7 @@ static inline u8 readb_relaxed(const volatile void __iomem *addr)
 #define readw_relaxed readw_relaxed
 static inline u16 readw_relaxed(const volatile void __iomem *addr)
 {
+	log_mmio_read(16, addr);
 	return __le16_to_cpu(__raw_readw(addr));
 }
 #endif
@@ -264,6 +275,7 @@ static inline u16 readw_relaxed(const volatile void __iomem *addr)
 #define readl_relaxed readl_relaxed
 static inline u32 readl_relaxed(const volatile void __iomem *addr)
 {
+	log_mmio_read(32, addr);
 	return __le32_to_cpu(__raw_readl(addr));
 }
 #endif
@@ -272,6 +284,7 @@ static inline u32 readl_relaxed(const volatile void __iomem *addr)
 #define readq_relaxed readq_relaxed
 static inline u64 readq_relaxed(const volatile void __iomem *addr)
 {
+	log_mmio_read(64, addr);
 	return __le64_to_cpu(__raw_readq(addr));
 }
 #endif
@@ -280,6 +293,7 @@ static inline u64 readq_relaxed(const volatile void __iomem *addr)
 #define writeb_relaxed writeb_relaxed
 static inline void writeb_relaxed(u8 value, volatile void __iomem *addr)
 {
+	log_mmio_write(8, value, addr);
 	__raw_writeb(value, addr);
 }
 #endif
@@ -288,6 +302,7 @@ static inline void writeb_relaxed(u8 value, volatile void __iomem *addr)
 #define writew_relaxed writew_relaxed
 static inline void writew_relaxed(u16 value, volatile void __iomem *addr)
 {
+	log_mmio_write(16, value, addr);
 	__raw_writew(cpu_to_le16(value), addr);
 }
 #endif
@@ -296,6 +311,7 @@ static inline void writew_relaxed(u16 value, volatile void __iomem *addr)
 #define writel_relaxed writel_relaxed
 static inline void writel_relaxed(u32 value, volatile void __iomem *addr)
 {
+	log_mmio_write(32, value, addr);
 	__raw_writel(__cpu_to_le32(value), addr);
 }
 #endif
@@ -304,6 +320,7 @@ static inline void writel_relaxed(u32 value, volatile void __iomem *addr)
 #define writeq_relaxed writeq_relaxed
 static inline void writeq_relaxed(u64 value, volatile void __iomem *addr)
 {
+	log_mmio_write(64, value, addr);
 	__raw_writeq(__cpu_to_le64(value), addr);
 }
 #endif
diff --git a/include/linux/log_rwmmio.h b/include/linux/log_rwmmio.h
new file mode 100644
index 000000000000..5f4f980c7e80
--- /dev/null
+++ b/include/linux/log_rwmmio.h
@@ -0,0 +1,42 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+#ifndef __LOG_MMIORW_H__
+#define __LOG_MMIORW_H__
+
+#include <linux/types.h>
+
+struct trace_rwmmio_ops {
+	void (*read)(u8 width, const volatile void __iomem *addr);
+	void (*write)(u8 width, u64 val, volatile void __iomem *addr);
+};
+
+#if IS_ENABLED(CONFIG_TRACE_MMIO_ACCESS) && !(defined(__DISABLE_TRACE_MMIO__))
+#include <linux/tracepoint-defs.h>
+
+DECLARE_TRACEPOINT(rwmmio_write);
+DECLARE_TRACEPOINT(rwmmio_read);
+#define rwmmio_tracepoint_active(t) tracepoint_enabled(t)
+
+extern struct trace_rwmmio_ops *rwmmio_ops;
+
+#define log_mmio_write(width, val, addr)		({\
+	if (rwmmio_tracepoint_active(rwmmio_write))	\
+		rwmmio_ops->write(width, val, addr);	\
+	})
+
+#define log_mmio_read(width, addr)			({\
+	if (rwmmio_tracepoint_active(rwmmio_read))	\
+		rwmmio_ops->read(width, addr);		\
+	})
+
+#else
+#define rwmmio_tracepoint_active(t) false
+
+static inline void log_mmio_write(u8 width, u64 val, volatile void __iomem *addr) { }
+static inline void log_mmio_read(u8 width, const volatile void __iomem *addr) { }
+
+#endif
+
+#endif
diff --git a/include/trace/events/rwmmio.h b/include/trace/events/rwmmio.h
new file mode 100644
index 000000000000..e92dcae099b5
--- /dev/null
+++ b/include/trace/events/rwmmio.h
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM rwmmio
+
+#if !defined(_TRACE_RWMMIO_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_RWMMIO_H
+
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(rwmmio_write,
+
+	TP_PROTO(unsigned long fn, u64 val, u8 width, volatile void __iomem *addr),
+
+	TP_ARGS(fn, val, width, addr),
+
+	TP_STRUCT__entry(
+		__field(u64, fn)
+		__field(u64, val)
+		__field(u64, addr)
+		__field(u8, width)
+	),
+
+	TP_fast_assign(
+		__entry->fn = fn;
+		__entry->val = val;
+		__entry->addr = (u64)(void *)addr;
+		__entry->width = width;
+	),
+
+	TP_printk("%pS width=%d val=%#llx addr=%#llx",
+		(void *)(unsigned long)__entry->fn, __entry->width,
+		__entry->val, __entry->addr)
+);
+
+TRACE_EVENT(rwmmio_read,
+
+	TP_PROTO(unsigned long fn, u8 width, const volatile void __iomem *addr),
+
+	TP_ARGS(fn, width, addr),
+
+	TP_STRUCT__entry(
+		__field(u64, fn)
+		__field(u64, addr)
+		__field(u8, width)
+	),
+
+	TP_fast_assign(
+		__entry->fn = fn;
+		__entry->addr = (u64)(void *)addr;
+		__entry->width = width;
+	),
+
+	TP_printk("%pS width=%d addr=%#llx",
+		 (void *)(unsigned long)__entry->fn, __entry->width, __entry->addr)
+);
+
+#endif /* _TRACE_RWMMIO_H */
+
+#include <trace/define_trace.h>
diff --git a/kernel/trace/Kconfig b/kernel/trace/Kconfig
index 420ff4bc67fd..9f55bcc51de1 100644
--- a/kernel/trace/Kconfig
+++ b/kernel/trace/Kconfig
@@ -95,6 +95,13 @@ config RING_BUFFER_ALLOW_SWAP
 	 Allow the use of ring_buffer_swap_cpu.
 	 Adds a very slight overhead to tracing when enabled.
 
+config TRACE_MMIO_ACCESS
+	bool "Register read/write tracing"
+	depends on TRACING
+	help
+	  Create tracepoints for MMIO read/write operations. These trace events
+	  can be used for logging all MMIO read/write operations.
+
 config PREEMPTIRQ_TRACEPOINTS
 	bool
 	depends on TRACE_PREEMPT_TOGGLE || TRACE_IRQFLAGS
diff --git a/kernel/trace/Makefile b/kernel/trace/Makefile
index bedc5caceec7..a3d16e1a5abd 100644
--- a/kernel/trace/Makefile
+++ b/kernel/trace/Makefile
@@ -99,5 +99,6 @@ obj-$(CONFIG_BOOTTIME_TRACING) += trace_boot.o
 obj-$(CONFIG_FTRACE_RECORD_RECURSION) += trace_recursion_record.o
 
 obj-$(CONFIG_TRACEPOINT_BENCHMARK) += trace_benchmark.o
+obj-$(CONFIG_TRACE_MMIO_ACCESS) += trace_readwrite.o
 
 libftrace-y := ftrace.o
diff --git a/kernel/trace/trace_readwrite.c b/kernel/trace/trace_readwrite.c
new file mode 100644
index 000000000000..b16d905bd53b
--- /dev/null
+++ b/kernel/trace/trace_readwrite.c
@@ -0,0 +1,43 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Register read and write tracepoints
+ *
+ * Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+#include <linux/ftrace.h>
+#include <linux/module.h>
+#include <linux/log_rwmmio.h>
+
+#define CREATE_TRACE_POINTS
+#include <trace/events/rwmmio.h>
+
+struct trace_rwmmio_ops *rwmmio_ops;
+
+#ifdef CONFIG_TRACE_MMIO_ACCESS
+void log_write_mmio(u8 width, u64 val, volatile void __iomem *addr)
+{
+        trace_rwmmio_write(CALLER_ADDR0, val, width, addr);
+}
+EXPORT_SYMBOL_GPL(log_write_mmio);
+EXPORT_TRACEPOINT_SYMBOL_GPL(rwmmio_write);
+
+void log_read_mmio(u8 width, const volatile void __iomem *addr)
+{
+        trace_rwmmio_read(CALLER_ADDR0, width, addr);
+}
+EXPORT_SYMBOL_GPL(log_read_mmio);
+EXPORT_TRACEPOINT_SYMBOL_GPL(rwmmio_read);
+#endif /* CONFIG_TRACE_MMIO_ACCESS */
+
+static struct trace_rwmmio_ops log_rwmmio_ops = {
+	.read = log_read_mmio,
+	.write = log_write_mmio,
+};
+
+static int __init rwmmio_trace_init(void)
+{
+	rwmmio_ops = &log_rwmmio_ops;
+
+	return 0;
+}
+core_initcall(rwmmio_trace_init);
-- 
2.33.1

